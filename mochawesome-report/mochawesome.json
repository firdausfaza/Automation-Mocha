{
  "stats": {
    "suites": 3,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-06T14:53:34.520Z",
    "end": "2023-07-06T14:53:43.652Z",
    "duration": 9132,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8995d54f-0510-4a92-bd8f-cdcfdc4b267c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b056050-4c0d-401c-b1e8-98876fb149fb",
          "title": "Auth Test ",
          "fullFile": "C:\\Users\\osa\\Desktop\\nestqa\\Automation-test\\tests\\scenarios\\auth.test.js",
          "file": "\\tests\\scenarios\\auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure create token api is successfully working",
              "fullTitle": "Auth Test  Ensure create token api is successfully working",
              "timedOut": false,
              "duration": 1297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.CREATE_TOKEN_WITH_VALID_DATA\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"token\"]);\ntoken = responseCreateToken.data.token;",
              "err": {},
              "uuid": "e84c4054-2296-4ec0-9ab6-adb08b9a3d6e",
              "parentUUID": "3b056050-4c0d-401c-b1e8-98876fb149fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure create token api without username is failed",
              "fullTitle": "Auth Test  Ensure create token api without username is failed",
              "timedOut": false,
              "duration": 798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.CREATE_TOKEN_WITHOUT_USERNAME\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "a9951577-5940-48ce-9a73-c322d56eba3f",
              "parentUUID": "3b056050-4c0d-401c-b1e8-98876fb149fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure create token api without username is failed",
              "fullTitle": "Auth Test  Ensure create token api without username is failed",
              "timedOut": false,
              "duration": 804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.CREATE_TOKEN_WITHOUT_PASSWORD\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "29c2d176-c204-418e-9381-6164bf625cb1",
              "parentUUID": "3b056050-4c0d-401c-b1e8-98876fb149fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure create token api with empty username and password is failed",
              "fullTitle": "Auth Test  Ensure create token api with empty username and password is failed",
              "timedOut": false,
              "duration": 801,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateToken = await restfulBooker.createToken(\n  data.INVALID_CREATE_TOKEN_WITH_EMPTY_USERNAME_PASSWORD\n);\nassert.equal(responseCreateToken.status, 200);\nassert.containsAllKeys(responseCreateToken.data, [\"reason\"]);\nassert.equal(\n  responseCreateToken.data.reason,\n  data.ERROR_INVALID_CREATE_TOKEN.reason\n);",
              "err": {},
              "uuid": "146f1d6d-320d-4177-8341-cdb15de88d93",
              "parentUUID": "3b056050-4c0d-401c-b1e8-98876fb149fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e84c4054-2296-4ec0-9ab6-adb08b9a3d6e",
            "a9951577-5940-48ce-9a73-c322d56eba3f",
            "29c2d176-c204-418e-9381-6164bf625cb1",
            "146f1d6d-320d-4177-8341-cdb15de88d93"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3700,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0227b1a0-7e16-4c2e-8d86-e25af37cbc76",
          "title": "CHECKING PING ",
          "fullFile": "C:\\Users\\osa\\Desktop\\nestqa\\Automation-test\\tests\\scenarios\\ping-check.test.js",
          "file": "\\tests\\scenarios\\ping-check.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure PING CHECK API is running",
              "fullTitle": "CHECKING PING  Ensure PING CHECK API is running",
              "timedOut": false,
              "duration": 796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responsePingCheck = await restfulBooker.pingCheck();\nassert.equal(responsePingCheck.status, 201);\nassert.equal(responsePingCheck.data, \"Created\");",
              "err": {},
              "uuid": "dfcecaa0-1a60-4771-9d1b-4788d0bd5516",
              "parentUUID": "0227b1a0-7e16-4c2e-8d86-e25af37cbc76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfcecaa0-1a60-4771-9d1b-4788d0bd5516"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 796,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "447c0069-ba45-4aed-a037-0b1666f5d617",
          "title": "Transaction Data Test ",
          "fullFile": "C:\\Users\\osa\\Desktop\\nestqa\\Automation-test\\tests\\scenarios\\transaction.test.js",
          "file": "\\tests\\scenarios\\transaction.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure create booking api is successfully working",
              "fullTitle": "Transaction Data Test  Ensure create booking api is successfully working",
              "timedOut": false,
              "duration": 794,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseCreateBooking = await restfulBooker.createBooking(\n  data.CREATE_BOOKING\n);\nassert.equal(responseCreateBooking.status, 200);\nassert.containsAllKeys(responseCreateBooking.data, [\"bookingid\"]);\nbookingId = responseCreateBooking.data.bookingid;",
              "err": {},
              "uuid": "7cd0450a-cfba-4e1a-9841-7dae10a959d3",
              "parentUUID": "447c0069-ba45-4aed-a037-0b1666f5d617",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure get all booking api is successfully working",
              "fullTitle": "Transaction Data Test  Ensure get all booking api is successfully working",
              "timedOut": false,
              "duration": 1335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetAllBooking = await restfulBooker.getAllBooking();\nassert.equal(responseGetAllBooking.status, 200);",
              "err": {},
              "uuid": "8ab59538-5147-4ae3-9df6-b3467ccd10b8",
              "parentUUID": "447c0069-ba45-4aed-a037-0b1666f5d617",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure get booking by id api is successfully working",
              "fullTitle": "Transaction Data Test  Ensure get booking by id api is successfully working",
              "timedOut": false,
              "duration": 798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetBooking = await restfulBooker.getBooking(bookingId);\nassert.equal(responseGetBooking.status, 200);\nassert.containsAllKeys(responseGetBooking.data, [\"firstname\"]);\nfirstName = responseGetBooking.data.firstname;",
              "err": {},
              "uuid": "00623be6-783d-4cb3-86ed-7ad193be4f89",
              "parentUUID": "447c0069-ba45-4aed-a037-0b1666f5d617",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure get booking by name api is successfully working",
              "fullTitle": "Transaction Data Test  Ensure get booking by name api is successfully working",
              "timedOut": false,
              "duration": 1689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const responseGetBookingByName = await restfulBooker.getBookingByFirstName(\n  firstName\n);\nassert.equal(responseGetBookingByName.status, 200);\nconsole.log(responseGetBookingByName.data[0].bookingid);\nassert.isArray(responseGetBookingByName.data);\nassert.equal(\n  (\n    await restfulBooker.getBooking(\n      responseGetBookingByName.data[0].bookingid\n    )\n  ).data.firstname,\n  firstName\n);",
              "err": {},
              "uuid": "b5453530-c64b-4016-8c2b-0e5b722d9d05",
              "parentUUID": "447c0069-ba45-4aed-a037-0b1666f5d617",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7cd0450a-cfba-4e1a-9841-7dae10a959d3",
            "8ab59538-5147-4ae3-9df6-b3467ccd10b8",
            "00623be6-783d-4cb3-86ed-7ad193be4f89",
            "b5453530-c64b-4016-8c2b-0e5b722d9d05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4616,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}